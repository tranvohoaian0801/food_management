#version: '3.8'
#
#services:
#  dev:
#    container_name: food_management
#    image: food_management
#    build:
#      context: .
#      target: development
#      dockerfile: ./Dockerfile
#    command: npm run start:debug
#    ports:
#      - 3000:3000
#    networks:
#      - nesjs-network
#    volumes:
#      - .:/usr/src/app
#      - /usr/src/app/node_modules
#    restart: unless-stopped
#  prod:
#    container_name: food_management
#    image: nestjs-api-prod:1.0.0
#    build:
#      context: .
#      target: production
#      dockerfile: ./Dockerfile
#    command: npm run start:prod
#    ports:
#      - 3000:3000
#    networks:
#      - nesjs-network
#    volumes:
#      - .:/usr/src/app
#      - /usr/src/app/node_modules
#    restart: unless-stopped
#
#networks:
#  nesjs-network:

#version: "3.8"
#services:
#    api:
#      build:
#        dockerfile: ./Dockerfile
#        context: .
#      depends_on:
#        - postgres
#      environment:
#        - ALLOW_OVERRIDE=true
#      ports:
#        - '${APP_PORT}:${APP_PORT}'
#    postgres :
#      image: postgres:10.4
#      ports:
#        - '${DB_PORT}:${DB_PORT}'
#      networks:
#        - back-tier
#      environment:
#        - POSTGRES_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
#        - POSTGRES_DATABASE=${DB_DATABASE}
#      hostname: localhost
#
#networks:
#  back-tier:

version: '3.8'

services:
  dev :
    container_name: food-management
    build:
      context: .
      target: development
    volumes:
      - .:/usr/src/app
    environment:
      - ALLOW_OVERRIDE=true
    ports:
      - 3000:3000
#    command: npm run start:dev
    env_file:
      - ./env/.env
    networks:
      - webnet
    depends_on:
      - db
# Ten cua service chay postgres phai la db
  db :
    container_name: postgres
    image : postgres:12-alpine
    networks:
      - webnet
    env_file:
      - ./env/.dev.env
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
#      POSTGRES_DB : food-management-DB
      PG_DATA : /var/lib/postgresql/data
    ports:
      - 5433:5432
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - /var/lib/postgresql/data:/var/lib/postgresql/data
#      - db-data :/var/lib/postgresql/data
networks:
  webnet:
volumes:
  pgdata:
#  db-data: